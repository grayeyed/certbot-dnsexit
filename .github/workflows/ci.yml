name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.13', '3.14']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt -r requirements-dev.txt

    - name: Run tests
      run: make test

    - name: Run linters
      run: make lint

  docker:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: certbot-dnsexit:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm certbot-dnsexit:test python --version
        docker run --rm certbot-dnsexit:test python -c "import certbot, requests, yaml, dns; print('All imports successful')"

  security:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.14
      uses: actions/setup-python@v5
      with:
        python-version: '3.14'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt -r requirements-dev.txt

    - name: Run security scan
      run: |
        bandit -r src/ -f json -o security-report.json || true
        if [ -f security-report.json ]; then
          echo "Security issues found:"
          cat security-report.json
          exit 1
        else
          echo "No security issues found"
        fi

    - name: Run dependency vulnerability scan
      run: |
        safety scan --output json > safety-report.json || true
        if grep -q '"vulnerabilities"' safety-report.json; then
          echo "Dependency vulnerabilities found:"
          cat safety-report.json | jq '.vulnerabilities[]? | {package: .package, vulnerability: .vulnerability, severity: .severity}'
          exit 1
        else
          echo "No dependency vulnerabilities found"
        fi

    - name: Run license compliance check
      run: |
        pip-licenses --format=json --output-file=licenses-report.json || true
        if [ -f licenses-report.json ]; then
          if grep -q '"License": "GPL\|AGPL\|LGPL"' licenses-report.json; then
            echo "Problematic licenses found:"
            cat licenses-report.json | jq '.[] | select(.License | contains("GPL") or contains("AGPL") or contains("LGPL")) | {name: .Name, license: .License}'
            exit 1
          else
            echo "No problematic licenses found"
          fi
        fi

  pre-commit:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.14
      uses: actions/setup-python@v5
      with:
        python-version: '3.14'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt -r requirements-dev.txt

    - name: Run pre-commit hooks
      run: |
        pre-commit install
        pre-commit run --all-files