name: CI

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Cache virtual environment
      uses: actions/cache@v3
      with:
        path: ./venv
        key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-venv-

    - name: Install dependencies
      run: make venv

    - name: Run tests
      run: make test

  code-quality:
   runs-on: ubuntu-latest
   steps:
   - uses: actions/checkout@v4

   - name: Set up Python
     uses: actions/setup-python@v5
     with:
       python-version: '3.11'

   - name: Cache virtual environment and pre-commit
     uses: actions/cache@v3
     with:
       path: |
         ./venv
         ~/.cache/pre-commit
       key: ${{ runner.os }}-venv-precommit-${{ hashFiles('**/requirements*.txt', '.pre-commit-config.yaml') }}
       restore-keys: |
         ${{ runner.os }}-venv-precommit-

   - name: Install dependencies
     run: |
       make venv
       . venv/bin/activate && pip install pre-commit

   - name: Run code quality checks
     run: |
       make lint
       . venv/bin/activate && pre-commit run --all-files || (echo "Pre-commit made changes, checking again..." && git diff --quiet && echo "All checks passed after auto-fix" && exit 0) || exit 1

  docker:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Build Docker image
      run: docker build -t certbot-dnsexit:test .

    - name: Test Docker image
      run: |
        # Test Python version
        docker run --rm --entrypoint python certbot-dnsexit:test --version

        # Test critical imports
        docker run --rm --entrypoint python certbot-dnsexit:test \
          -c "import certbot, requests, dns, dotenv, josepy; print('Critical imports successful')"

        # Test application modules
        docker run --rm --entrypoint python certbot-dnsexit:test \
          -m src.auth_hook --help || true

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Cache virtual environment
      uses: actions/cache@v3
      with:
        path: ./venv
        key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-venv-

    - name: Install dependencies
      run: make venv

    - name: Run security checks
      run: |
        # Print detailed Python version info
        python -c "import sys; print(f'Python {sys.version}')" || true
        python -c "import ast; print(f'AST module version: {ast.__version__ if hasattr(ast, \"__version__\") else \"not available\"}')" || true

        # Print Bandit version and info
        echo "Bandit version:"; bandit --version || true
        pip show bandit || true

        make security

    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          security-report.json
          safety-report.json
          licenses-report.json
        if-no-files-found: ignore
        retention-days: 90